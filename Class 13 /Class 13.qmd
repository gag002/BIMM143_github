---
title: "Class 13"
author: "Gonzalez A16791042"
format: gfm
---

This week we are looking at differential expression analysis. 


## import/read the data from Himes et al.

```{r}
counts <- read.csv("airway_scaledcounts.csv",
                   row.names=1)
metadata <- read.csv("airway_metadata.csv")

```

Let's have a peak at this data

```{r}
head(metadata)
```



Sanity check on correspondence of counts and metadata

```{r}
all( metadata$id == colnames(counts) )
```

```{r}
all( c(T, T, F, T) )
```




> Q1. How many genes are in this dataset?

There are 38694 nrow(counts) genes

> Q2. How many 'contol' cell lines do we have? 

```{r}
n.control <- sum(metadata$dex == 'control')
```


There are '4 n.control' control cell lines in this data set. 



## Extract and summarize the control samples

To find out where the control samples are we need the metadata


> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?


```{r}
control <- metadata[metadata$dex == "control", ]
control.counts <- counts[ , control$id]
control.mean <- rowMeans(control.counts)
head(control.mean)
```

## Extract and summarize the treated (i.e. drug) samples

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata$dex == "treated", ]
treated.counts <- counts[, treated$id]
treated.mean <- rowMeans(treated.counts)
```



Store these reults together in a new data frame called 'meancounts'

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```




Let's make a plot to explore the results a little..

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1], meancounts[,2])
```


> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?


```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point()
```


We will make a log-log plot to draw out thsi skewed data and see what is going on.

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?


```{r}
plot(meancounts[,1], meancounts[,2], log="xy",
     xlab="log control counts",
     ylab="log of treated counts")
```


We often log2 transformations when dealing with this sort of data.

```{r}
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(20/40)
```

```{r}
log2(80/20)
```


This log2 trasnformation has this nice property where if there is no change the log2 value will be zero and if it double the log2 value will be 1 and if halved it will be -1.

So lets add a log2 fold change column to our results so far

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / 
                          meancounts$control.mean)
```

```{r}
head(meancounts)
```

We need to get rid of zero count genes that we can not say anything about

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind argument will return 'which()' back to the row and column. The 'unique()' function is needed to notice the zero entries and not repeat a row. 

```{r}
zero.values <-  which( meancounts[,1:2]==0, arr.ind=TRUE ) 
to.rm <- unique(zero.values[,1])
mycounts <- meancounts[-to.rm,]
```


```{r}
head(mycounts)
```

How many genes are remaining?
```{r}
nrow(mycounts)
```



# Use fold change to see up and down regulated genes

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let's filter the dataset both ways to see how many genes are up or down-regulated. 


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc > 2)
```

and down-regulated

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc < -2)
```


> Q10. Do we trust these results? 

Well not fully because we don't yet know if these changes are significant...

## DESeq2 analysis
Let's do this the right way. DESeq2 is an R package specifically for analyzing count-based NGS data like RNA-seq. It is avalable from Bioconductor. Bioconductor is a project to provide tools for analyzing high-throughput genomic data including RNA-seq, ChIP-seq and arrays. 


```{r}
# load up DESeq2
library(DESeq2)

dds <- DESeqDataSetFromMatrix(countData=counts,
                             colData=metadata,
                             design=~dex)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```


We can get some basic summary tallies using the 'summary()' function

```{r}
summary(res, alpha=0.05)
```


# Volcano plot

Make a summary plot of our results.
```{r}
plot(res$log2FoldChange, log(res$padj))
```

```{r}
log(0.1)
log(0.05)
```

Finish for today by saving our results

```{r}
write.csv(res, file="DESeq2_results.csv")
```



## DAY2

```{r}
head(res)
```

I need to translate our gene identifiers "ENSG00000...." into gene names that the rest of the world can understand. 



To this "annotation" I will use the "AnootationDBi" package. I can install this with 'BiocManager::install()'

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db)
```

I will use the 'mapIds()' function to "map" identifiers to those from different databases. I will go between "ENSEMBL" and "SYMBOL" (and then after "GENENAME").

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys= rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")
#head(res)

```

Add "GENENAME"

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys= rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")
```



And add ENTREZID

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys= rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
```


Save our annotated results object. 

```{r}
write.csv(res, file="results_annotated.csv")
```

##Pathway Analysis

Now that we have our results with added annotation we can do some pathway mapping

Let's use the **gage** package to look for KEGG pathways in our results (genes of interest). I will use the **pathview** package to draw little pathway figures. 


```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 3 pathways
# head(kegg.sets.hs, 3)

```



What **gage** wants as input is not my big table/data.frame of results. It just want a "vector of importance". For RNAseq data like we have this is our Log2FC values...



```{r}
oldchanges = res$log2FoldChange
names(oldchanges) = res$entrez
head(oldchanges)
```



Now lets run the gage pathway analysis... 

```{r}
#get the results
keggres= gage(oldchanges, gsets=kegg.sets.hs)
```

What is in this 'keggres' object?

```{r}
attributes(keggres)
```


```{r}
head(keggres$less, 3)
```

Let's use the pathview package to look at one of these highlighted KEGG pathways with our genes highlighted. "hsa05310 Asthma"

```{r}
pathview(gene.data=oldchanges, pathway.id="hsa05310")
```

![Asthma pathway with my DEGs](hsa05310.pathview.png)

